<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>

    <!-- Any two instances of this are stateless, execute the same conversion algorithm and therefore are equal. -->
    <Match>
        <Class name="net.sf.dz3.device.sensor.impl.AnalogConverterLM34"/>
        <Method name="equals" />
        <Bug pattern="HE_EQUALS_USE_HASHCODE"/>
    </Match>

    <!-- Any two instances of this are stateless, execute the same conversion algorithm and therefore are equal. -->
    <Match>
        <Class name="net.sf.dz3.device.sensor.impl.AnalogConverterTMP36"/>
        <Method name="equals" />
        <Bug pattern="HE_EQUALS_USE_HASHCODE"/>
    </Match>
    
    <!-- Test class, inconsequential -->
    <Match>
        <Class name="net.sf.dz3.scheduler.gcal.GCalScheduleUpdaterTest$NullThermostat"/>
        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />
    </Match>
    
    <!-- Test class, inconsequential -->
    <Match>
        <Class name="net.sf.dz3.util.digest.MessageDigestCacheTest"/>
    </Match>
    
    <!-- Test class, inconsequential -->
    <Match>
        <Class name="net.sf.dz3.util.counter.FileUsageCounterTest"/>
    </Match>

    <!-- Test class, inconsequential -->
    <Match>
        <Class name="net.sf.dz3.device.sensor.impl.onewire.SwitchAddressTest"/>
    </Match>

    <!--
    
        Complex false positive. FindBugs is confused by
        a) NDC.push() and
        b) the fact that the lock access is indirect.
        
        Rewriting the code to use the bare Lock variable and no NDC.push() between lock() and try() takes care of it,
        but there's no practical case where this can concievably happen.  
        -->
    <Match>
        <Class name="net.sf.dz3.device.sensor.impl.onewire.SwitchTest"/>
        <Bug pattern="UL_UNRELEASED_LOCK_EXCEPTION_PATH" />
    </Match>
    
</FindBugsFilter>